Создается интерфейс, который реализуют классы-обработчики (один класс на объект).
Схема работы паттерна: клиент вызывает метод заместителя -> заместитель вызывает единственный
метод обработчика invoke(Object proxy, Method method, Object[] args) -> обработчик решает как
поступать с данным запросом (возможно передать запрос реальному объекту return method.invoke(person, args);).
