Служит для обеспечения взаимосвязи между клиентом и сервером по средствам сети.
Предоставляет объект, который связывается с удаленным объектом - доступ к которому удален, защищен,
требует много затрат при создании.

Создание помощника:
 - создание интерфейса удаленного доступа, extends интерфейс Remote (java.rmi). Все аргументы и типы
 возвращаемых значений должны быть Serializable.
 - создание реализации интерфейса удаленного доступа. Помимо этого extends UnicastRemoteObject,
 который наделит класс стандартной реализацией для работы с удаленной службой (понадобится
 private static final long serialVersionUID = 1L). Определить конструктор без аргументов, который
 throws RemoteException. Зарегестрировать созданную службу в реестре RMI.
 - запустить rmiregistry из терминала
 - из нового терминала запустить созданную службу (java MyRemoteImpl)

Получение клиентом объекта заглушки: MyRemote service = (MyRemote) Naming.lookup("rmi://127.0.0.1/RemoteHello").
Клиент обращается к серверу с запросом -> сервер возвращает заглушку -> клиент вызыввает методы заглушки,
будто настоящей службы.

Выделяют несколько видов заместителей: удаленный (если объекты находятся на разных JVM), виртуальный
(когда создание объекта затратно, и откладывается непосредственно до взаимодействия с ним)