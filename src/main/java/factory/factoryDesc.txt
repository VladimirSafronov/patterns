Олицетворяет собой принцип инверсии зависимостей - код должен зависеть от абстракций, а не от конкретных
классов. Т.е. высокоуровневый класс не должен ничего знать о конкретных реализациях. Вместо этого
создается абстрактный класс, который реализуется низкоуровневыми классами. Создание классов делегируется
фабрике. Т.о. образом клиент изолирован от создание объектов.

Фабричный Метод основан на наследовании: создание объектов делегируется субклассам, реализующим
Фабричный Метод для создания объектов. Абстрактная Фабрика основана на композиции: создание объектов
реализуется в методе, доступ к которому осуществляется через интерфейс фабрики.

Задача Фабричного Метода — перемещение создания экземпляров в субклассы.
Задача Абстрактной Фабрики — создание семейств взаимосвязанных объектов без зависимости от их конкретных классов.

Несколько советов, которые помогут в реализации инверсии зависимостей: ссылки на конкретные классы
не должны хранится в переменных (это работа фабрики); в архитектуре не должно быть классов-прямых
наследников (вместо этого используй наследование от абстрактного класса либо интерфейса); не переопределяй
реализованные в базовом классе методы в его классах наследниках (означает, что базовый класс является
плохой абстракцией).  (стоит придерживаться, но возможно отступать от советов).
